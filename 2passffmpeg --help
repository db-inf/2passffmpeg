$ 2passffmpeg.sh --help
#
# Algemeen
# ========   
# Bash-script voor hercompressie van video-bestanden met ffmpeg, in 2 doorgangen: analyse in de 1ste,
# compressie in de 2de. Dit script zoekt o.a. getopt, ffprobe, en het uitvoerbaar script ffprobewaarden.
# (https://github.com/db-inf/ffprobewaarden) in het pad.
#
# GEBRUIK:
#	$ source 2passffmpeg [--optie[=waarde]]... [--] bronbestand \
#	  [-ffmeg-optie [optiewaarde] | [-i] [extrabestand] | ["demuxdirectief"] ]...
#	$ . 2passffmpeg ...
#	$ 2passffmpeg ...
#	$ bash 2passffmpeg ...
#	- de vorm met "source" of "." is aanbevolen bij herhaalde aanroepen, omdat het process ID deel is van de naam
#	 van de statistiek-bestanden uit de 1ste doorgang, die nodig zijn voor de 2de. Als het script niet met "source"
#	 wordt uitgevoerd, is dat telkens een andere PID, dus een nieuwe bestandsnaam, en loopt de \tmp schijf vol.
#	- De parameters --optie[=waarde] worden vertaald naar ffmpeg opties
#	  - namen van opties mogen verkort worden als dat nog een unieke optie-string geeft
#	  - bij opties met een optionele waarde is de '=' verplicht, bij de andere mag het een spatie zijn.
#	  - lange optienamen mogen ook met 1 koppelteken geschreven worden, b.v. -help i.p.v. --help (experimenteel!),
#	   maar een mogelijke interpretatie als een reeks van 1-letter-opties heeft dan voorrang.
#	- Als het pad naar "bronbestand" begint met een '-', wordt de optionele '--' ervoor verplicht.
#	- "-i bronbestand" wordt ingevoegd als 1ste invoerbestand in de ffmpeg-opdracht.
#	- "-ffmeg-optie [optiewaarde]" en "-i extrabestand" worden letterlijk ingevoegd in de ffmpeg-opdracht, direct
#	 na "bronbestand", in de opgegeven volgorde. Deze functionaliteit dubbelt deels met --uitopts.
#	  - Parameters van video- en geluidsspoor worden afgeleid uit "bronbestand", nooit uit "extrabestand". Deze
#	   parameters zijn o.a. nodig bij de opties --bronbr, --rasterbr, --ar=[12]k], en zonder de optie --surround.
#	  - De vorm "extrabestand", zonder "-i" voor, dient enkel bij gebruik van de --concat parameter, die elk
#	   "extrabestand" toevoegt na "bronbestand", in het formaat voor het concat protocol dan wel de concat
#	   demuxer. Met "--concat" is geen expliciete -ffmpeg-optie mogelijk, maar de concat demuxer aanvaardt na
#	   "bronbestand" en elk "extrabestand" directieven als "inpoint hh:mm:ss.mmm" en "outpoint hh:mm:ss.mmm".
#
# VOORBEELD
#	- 1 brondbestand hercomprimeren:
#	  $ . 2passffmpeg.sh --doel=/media/ramdisk --vbr=999k --ar=22050 --preset=slow bronbestand
#	    --doel=directory : uiteindelijke doeldirectory (tusentijds in /tmp)
#	    --vbr=999k video bitrate 999kb/s (bij ontstentenis berekend uit pixelraster en framerate)
#	    --ar=22050 voor herleiding van de bemonsteringssnelheid van geluid tot 22050kHz
#	   --preset=slow : gebruikt meer compressie-mogelijkheden dan de default 'medium'
#	- een reeks bronbestanden hercomprimeren:
#	  $ epcdir=/media/ramdisk; for a in *.avi; do [ -f "$a" ] && \
#	    . 2passffmpeg.sh --doel="$epcdir" ... "$a";done
#	- een reeks samenvoegbare bestanden samengevoegd hercomprimeren (met het ffmpeg concat protocol)
#	  $ . 2passffmpeg --concat ... --doel="/media/schijf" bronbestand extrabestand ...
#	- hercomprimeren en de 1ste uit een set aparte bitmap ondertitels invoegen in .mkv-bestand :
#	  $ . 2passffmpeg --ext=mkv --uitopts="2: -map 0:V -map 0:a -map 1:s:0 -c:s dvd_subtitle" ... \
#	     brondbestand -i bron.idx -i bron.sub
#	- een fragment hercomprimeren aan verschillende bitrates, om te vergelijken :
#	  $ for p in {60..100..5}%;do . 2passffmpeg.sh --inopts="-ss 5:00 -t 2:00 -noaccurate_seek" \
#	    --doel=/tmp --ext=$p.mp4 --bronbr=$p --rasterbr=$p --ac --preset=fast bron.mp4;done
#	- een fragment hercomprimeren met verschillende constant rate factors, om te vergelijken :
#	  $ for crf in {16..28..3};do . 2passffmpeg.sh --inopts="-ss 5:00 -t 2:00 -noaccurate_seek" \
#	    --doel=/tmp --ext=crf$crf.mp4 --1pass --x265="-crf $crf" --acopy --preset=fast bron.mp4;done
#
# Externe procescontrole
# ======================
# Dit scripts sluit via een zelf te plaatsen symbolic link vanuit de directory "$epcdir/" de
# proces-controlebestanden (https://github.com/db-inf/externe-procescontrole) _threads, _pauze?,
# _slaap? en _uit? in, voor zover ze gevonden worden (anders volgt een bash foutboodschap, maar
# het script doet verder zijn werk). Als dit script in een loop wordt aangeroepen, kan die loop
# gepauzeerd of afgebroken worden door die symlinks in "$epcdir/" een gepaste naam te geven; zoals 
# beschreven in die bestanden zelf. Concreet gebruikt dit script het bestand _threads als optie
# voor ffmpeg, op het einde de scripts _slaap* en _uit*, en voor elke ffmpeg-pass de scripts
# "_pauze* _pauze1" resp. "_pauze* _pauze2". 
#
# VOORBEELD
#	- een set afleveringen hercomprimeren: de opdracht kan in meerdere shells tegelijk uitgevoerd worden,
#	 met elk hun eigen processcontrole door de parameter _pauzeterm1 te veranderen. Elke sessie maakt bij
#	 aanvang een leeg bestand aan met de doelnaam (touch), om een claim te leggen op die aflevering.
#	  $ epcdir="/media/_hercompressie" ext=mp4; for a in *.{mp4,m4v,avi,mov,wmv,mkv}; do \
#	    . "$epcdir/_pauze"* _pauzeterm1; \
#	    [ ! -f "$a" -o -f "$epcdir/${a%.*}.$ext" ] && continue || touch "$epcdir/${a%.*}.$ext"; \
#	    . ~/Documents/shellscripts/2passffmpeg.sh --doel="$epcdir" --ext="$ext" --he2 --avbr=2 --ar=1k \
#	    --bronbr=105% --rasterbr=105% "$a";
#	    done
#
# Bash variabelen
# ===============
# Als de onderstaande bash-variabelen gedefiniëerd zijn, worden ze gebruikt in dit script.
# - OPGELET: tenzij het script wordt uitgevoerd met de opdracht source- of '.', moet de variabele
#  geëxporteerd zijn, b.v. "export epcdir=/media/ramdisk", of direct in het environment geplaatst:
#  "epcdir=/media/ramdisk 2passffmpeg.sh ...". Opgelet: in het 2de geval kan de waarde niet gebruikt
#  worden op de opdrachtlijn zelf, want het is geen shell variabele.
# - $ffmpeg : pad naar de te gebruiken versie van ffmpeg; default "/opt/ffmpeg-dirk/ffmpeg"
# - $epcdir : pad naar de directory met de scripts voor externe procescontrole (zie hoger); default "$doel"
# - ${inopts1[@]}, ${inopts2[@]} en ${inopts[@]} : array met ffmpeg-opties te plaatsen voor de "-i invoer"
#  van resp. de 1ste, de 2de of elke pass
#	- deze opties wordt alleen gebruikt in het script, als de parameter --inopts
#	 wordt opgegeven met waarde "1:"  of "2:" voor pass 1 of 2, of zonder waarde voor elke pass.
#	- meerdere parameters (zie "Meervoudige parameters"), kunnen soms opgegeven worden als 1 splitsbare
#	 waarde tussen aanhalingstekens met de optie --inopts, b.v. --inopts="-ss 60 -t 300"
# - ${uitopts1[@]}, ${uitopts2[@]} en ${uitopts[@]} : array met ffmpeg-opties te plaatsen na de "-i invoer"
#	van resp. de 1ste, de 2de of elke pass
#	- verder zoals inopts
# - ${filteropts1[@]}, ${filteropts2[@]} en ${filteropts[@]} : array met ffmpeg-opties te plaatsen na de --uitopts
#	 van resp. de 1ste, de 2de of elke pass.
#	- verder zoals inopts
# - ${postopts1[@]}, ${postopts2[@]} en ${postopts1[@]} : array met ffmpeg-opties te plaatsen na "uitvoerbestand"
#	van resp. de 1ste, de 2de of elke pass, b.v. om nog een 2de uitvoer te doen van dezelfde invoer
#	- verder zoals inopts
#
# Meervoudige parameters
# ======================
# Voor een aantal opties laten we een verplichte of facultatieve optie-waarde uit elkaar vallen
# in words door ze te expanderen als $2 i.p.v. "$2", o.a. --inopts en de --encoder-keuzes. Ge kunt
# ze opgeven tussen quotes als er zelf GEEN QUOTES EN SPATIES instaan, b.v.
#	--uitopts="-filter_complex [0:v]yadif[tmp],[tmp][1:s]overlay"
#	OF
#	--libfdk_aac="-af pan=stereo|FL<FC+0.707*FL+0.30*BL|FR<FC+0.707*FR+0.30*BR"
# Redirects en pipes ">", "<" en "|" worden geïnterpreteerd vóór de expansie van variabelen, en geven
# dus geen probleem.
# Als meervoudige parameters wel problemen geven voor woordsplitsing, kunnen ze vooraf in een bash
# array gezet worden via het mechanisme beschreven voor o.a. --inopts in de sectie "Bash variabelen".
#
# Algemene opties
# ===============
#	-h [--optienaam]...: Toon een korte help-tekst, of volledige help-tekst voor de gevraagde optienaam(en)
#	--help [--optienaam]...: Toon volledige help-tekst, of volledige help-tekst voor de gevraagde optienaam(en)
#	--dryrun : doorloopt script, bepaalt b.v. ook video bitrates, maar echoot de samengestelde ffmpeg-
#		opdrachten zonder ze uit te voeren, zodat ge die met gepast toevoegen van quotes en evt.
#		bijkomend maatwerk naar een opdrachtlijn kunt kopiëren.
#	--pid=id : geef een andere identificatie dan process ID voor statistiekbestanden van pass 1 of het
#		script voor de concat demuxer.
#		Om dit script gelijktijdig te kunnen uitvoeren in meerdere processen, wordt het process id
#		$$ opgenomen in de naam van die bestanden. Met deze optie kan een andere identificatie opgegeven
#		worden, best een unieke, b.v. om met "--pass2only" de statistiekbestanden van een eerdere sessie
#		te hergebruiken. Omwille van de syntax van "-x265-params", bevat "id" best geen ':'.
#	--1pass
#	--singlepass : doe een gewone 1-pass hercompressie; intern is het de 1ste doorgang, de analysestap, die wordt
#		overgeslagen, en enkel de instellingen voor de 2de doorgang worden gebruikt.
#	--pass2only : voer enkel de 2de doorgang uit, b.v. om de analyse-statistieken van een eerdere uitvoering te
#		hergebruiken; enkel de instellingen voor de 2de doorgang worden gebruikt. Indien nodig kunt u 
#		met de optie "--pid" de process identificatie van de 1ste doorgang opgeven.
#	--postopts[="optie-strings voor bijkomende uitvoer"] : 1 of meerdere ffmpeg-opties om een 2de uitvoer te koppelen 
#		aan dezelfde invoer, volgens de beschrijving onder de sectie "Meervoudige parameters".
#		Opties die enkel voor de 1ste of de 2de doorgang gelden, worden opgegeven in een optie-string
#		die begint met de tekens "1:" dan wel "2:".
# 		De "--postopts" opties worden in de ffmpeg-opdracht ingevoegd na de naam van het 1ste uitvoer-bestand.
#		Meerdere "--postopts" parameters worden in opgegeven volgorde na elkaar toegevoegd.
#	
#		Voorbeelden van bijkomende uitvoeren (meestal enkel zinvol in 1 van de doorgangen):
#		------------------------------------
# 		- bewaar interne tekst-ondertitels bij 2de doorgang in extern bestand in subrip-formaat:
#		  --postopts="2: -map s -c:s subrip naam.taal.srt"
#
# Invoeropties
# ============   
#	--inopts[="optie_strings_voor_invoer"] : 1 of meerdere ffmpeg-opties voor de interpretatie van het invoerbestand,
#		volgens de beschrijving onder de sectie "Meervoudige parameters".
#		Opties die enkel voor de 1ste of de 2de doorgang gelden, worden opgegeven in een optie-string
#		die begint met de tekens "1:" dan wel "2:".
# 		De "--inopts" opties worden in de ffmpeg-opdracht ingevoegd voor de naam van het invoer-bestand.
#		Meerdere "--inopts" parameters worden in opgegeven volgorde na elkaar toegevoegd.
#		- ffmpeg-vertaling, naargelang doorgang 1 of 2 : $optie_strings_voor_invoer, ontdaan van evt. "1:" of "2:"
#		 en opgesplitst op de spaties.
#		- ffmpeg-vertaling zonder optie_strings_voor_invoer, of met enkel "1:" of "2:": de letterlijke elementen
#		 van de arrays "", "" resp. "", 
#	
#		Voorbeelden van invoeropties (meestal enkel zinvol in beide de doorgangen):
#		---------------------------
#		- hercompressie-parameters snel op een korte clip uitproberen :
#		  --inopts="-ss 350 -t 300 -noaccurate_seek" : 
# 		  - OPM: -ss en -t  in --inopts zijn niet altijd nauwkeurig, o.a. voor .srt ondertitels, in
#		   --uitopts wel
#		  - OPM: -ss en -t  is sneller in --inopts dan in --uitopts, maar moet dan wel voor elke -i
@		   staan als er meerdere zijn
#		- bij pass 1 geen andere info dan errors :
#		  --inopts="1: -loglevel error
#		- kleuren dvd-subtitles: palet (16 kleuren) staat in .IFO, ffmpeg leest die niet. Die moet ge dus
#		 door uitproberen zelf bepalen, b.v. in ffplay, of met een korte clip
# 		  - meestal zijn enkel 1ste paar entries gebruikt: probeer eerst een clip met een felle kleur voor
#		   de rest, en zet die achteraf voor de zekerheid op de tekstkleur:
#		    --inopts="-ss 10:0 -t 60 -palette aaaa00,00aaaa,000000,ffffff,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00,ffff00"
#		    --inopts="-palette f0d000,706100,383000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000,f0d000"
#		- langer zoeken naar begin van een stream, b.v. bitmapped ondertitels die pas na een tijd beginnen:
#		  --inopts="-analyzeduration 100M -probesize 100M"
#	--concat[=demuxer|protocol] : concateneer elk "extrabestand" met "bronbestand" met de concat demuxer (default)
#	 of het concat protocol.
#		- de concat demuxer aanvaardt na elk bron~ of extrabestand directieven-strings als "inpoint timestamp",
#		 "outpoint timestamp" en "duration dur", met timestamp en dur in ffmpeg-formaat.
#		  - ffmpeg-vertaling : "-f concat -safe 0" en gegenereerd bestand "/tmp/2passffmpeg_pid${pid}_concatdemux"
#		   als pseudo-bronbestand
#		- "the concat protocol works at the file level. Only certain files (MPEG-2 transport streams, possibly others)
#		 can be concatenated. This is analogous to using cat on UNIX-like systems or copy on Windows."
#		  - ".mp4-files can be losslessly transcoded to MPEG-2 transport streams to concatenate. All MPEG codecs
#		   (MPEG-4 Part 10 / AVC, MPEG-4 Part 2, MPEG-2 Video, MPEG-1 Audio Layer II, MPEG-2 Audio Layer III (MP3),
#		   MPEG-4 Part III (AAC)) are supported in the MPEG-TS container format, although the commands below would
#		   require some change."
#		  - b.v. voor mp4 met H.264 video en AAC audio (voor h.265-invoer: idem met "-bsf:v hevc_mp4toannexb"):
#		     $ ffmpeg -i input1.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts intermediate1.ts
#		     $ ffmpeg -i input2.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts intermediate2.ts
#		     $ . 2passffmpeg --concat=protocol --libx265="-bsf:a aac_adtstoasc" ...  intermediate1.ts intermediate2.ts
#		  - ffmpeg-vertaling : gegenereerde string "concat:bronbestand|extrabestand..." als pseudo-bronbestand
#
# Uitvoeropties
# =============   
#	--doel=doeldirectory : Bestemming van het gehercomprimeerde bestand. De bestandsnaam blijft behouden, op
#		de extensie na.
#		Als de variabele $epcdir nog geen waarde heeft, wordt die ingesteld op de waarde van "--doel".
#	--ext=extensie : bestandsextensie (default "mp4") van het doelbestand, zonder voorloop-'.'; 
#		ffmpeg leidt van de extensie ook het container-formaat af.
#		- Als ge een niet-standaard extensie opgeeft, moet ge daarom expliciet een containerformaat opgeven
#		 als uitvoeropties voor b.v. doorgang 2: --ext=mpeg4video --uitopts "2:-f mp4"
#		- Om een suffix toe te voegen aan de stam van de naam van de invoer, wordt die best door een '.' gescheiden
#		 van de eigenlijke extensie, zodat ffmpeg nog steeds het containerformaat kan afleiden. B.v. om een vergelijkende
#		 reeks in verschillende bitrates te maken:
#		  $ for br in 900k 1000k;do . 2passffmpeg.sh ... --vbr= --ext=_.mp4 ...;done
#	--metadata : neemt zo mogelijk de metadata van de invoer over in het uitvoerbestand; default wordt die niet overgenomen.
#		- ffmpeg-vertaling : bij ontstentenis "-map_metadata:g -1 -map_metadata:s -1 -map_metadata:c -1 \
#		  -map_metadata:p -1"
#	--chapters : neemt zo mogelijk de chapters metadata van de invoer over in het uitvoerbestand; default wordt
#		die niet overgenomen.
#		- ffmpeg-vertaling : bij ontstentenis "-map_chapters -1"
#	--uitopts[="optie_strings_voor_uitvoer"] : 1 of meerdere ffmpeg-opties voor het aanmaken van het uitvoerbestand,
#		volgens de beschrijving onder de sectie "Meervoudige parameters".
#		Opties die enkel voor de 1ste of de 2de doorgang gelden, worden opgegeven in een optie-string
#		die begint met de tekens "1:" dan wel "2:".
# 		De "--uitopts" opties worden in de ffmpeg-opdracht ingevoegd direct na de naam van het invoer-bestand, zodat ge met
#		"--uitopts" evt. ook extra invoerbestanden kunt opgeven.
#		Meerdere "--uitopts" parameters worden in opgegeven volgorde na elkaar toegevoegd.
#		- ffmpeg-vertaling, naargelang doorgang 1 of 2 : $optie_strings_voor_uitvoer, ontdaan van evt. "1:" of "2:"
#		 en opgesplitst op de spaties.
#		- ffmpeg-vertaling zonder optie_strings_voor_uitvoer, of met enkel "1:" of "2:": de letterlijke elementen
#		 van de arrays "", "" resp. "", 
#	
#		Voorbeelden van uitvoeropties (meestal enkel zinvol in beide de doorgangen):
#		-----------------------------
#		- hercompressie-parameters snel op een korte clip uitproberen :
#		  --uitopts="-ss 350 -t 300" : 
# 		  - OPM: -ss en -t  in --inopts zijn niet altijd nauwkeurig, o.a. voor .srt ondertitels, in --uitopts wel
#		  - OPM: -ss en -t  is sneller in --inopts dan in --uitopts, maar moet dan wel voor elke -i staan als er meerdere zijn
#		- aspect ratio instellen :
#		  --uitopts="-aspect 4:3"
#		- hercomprimeer echte video en (in pass 2) eerste geluid :
#		  --uitopts="-map V" --uitopts="2: -map a:1"
#		- verwijder ondertitels :
#		  --uitopts="-sn"
#		- laat ffmpeg langer naar 1ste video frame zoeken (b.v. bij stilstaand openingsbeeld): sommige codecs lezen dit
#		 als dropped frames, en dan moet de geluid-buffer groter om "Too many packets buffered for output stream 0:1"
#		 te vermijden :
#		  --uitopts="2: -max_muxing_queue_size 10000" :
#		  - OPM: aangezien in de 1ste doorgang geluid genegeerd wordt, is dit enkel relevant in de 2de doorgang.
#		- video uit het normale invoerbestand (laatste parameter), subs uit een 2de en geluid uit een 3de bestamd
#		  $ for film in *.mp4;do uitopts=(-i ".idx" -i "/anderpad/.m4a" -map 0:V);. 2passffmpeg.sh
#		    --uitopts --uitopts="2:-map 2:a" ... ""
#		  - OPM: ondertitels inbakken: zie --filteropts
#		- hercomprimeer, en bewaar van ingesloten bitmap ondertitels enkel het 2de (nederlandse) spoor zonder ze
#		 in te branden. Dit gebeurt in doorgang 2, en vereist uitvoer in .mkv:
#		  --uitopts="2: -map V -map a -map s:1 -c:s copy -metadata:s:s language=dut" --ext=mkv \
#		    --inopts="2: -probesize 100M -analyzeduration 100M"
#	--novfr : behoudt het standaard gedrag van ffmpeg voor wat betreft variabele video frame rate.
#		- "for MP4, ffmpeg defaults to constant-frame rate, where it picks [ffprobe-waarde] r_frame_rate as the value.
#		 It will then duplicate or drop frames to keep that rate."
#		- Variabele framerate is nochtans een van de sterke compressie-kansen van h.264 en h.265. Zowat elk
#		 containerformaat kan variabele framerate aan, dus dit script gebruikt standaard een ffmpeg-optie om de
#		 originele frame timestamps en framerate te bewaren, ook variabele. Deze optie --novfr laat dat achterwege.
#		- Bronnen met variabele framerate zijn te herkennen met aan fps != tbr (ffprobe) of
#		 r_frame_rate != avg_frame_rate (ffprobewaarden). Eigenlijk is r_frame_rate geen framerate:  het is 
#		 "the least common multiple of all framerates in the stream", en daardoor "the lowest framerate with which
#		 all timestamps can be represented accurately". Het is dus een veelvoud van elke andere feitelijke
#		 framerate in de bron, en mogelijk veel te hoog om te misbruiken als nieuwe vaste framerate.
#		- ffmpeg-vertaling : bij ontstentenis "-vsync vfr"
#	--filteropts[="optie_strings_voor_filters"] : 1 of meerdere ffmpeg-opties voor het filteren van de invoer 
#		(geluid en/of video), volgens de beschrijving onder de sectie "Meervoudige parameters".
#		Filters die enkel voor de 1ste of de 2de doorgang gelden, worden opgegeven in een optie-string die begint 
#		met de tekens "1:" dan wel "2:".
#		Elke filter begint met de te gebruiken ffmpeg-optie, zoals "-filter:v", "-af" of "-filter_complex".
# 		De "--filteropts" opties worden in de ffmpeg-opdracht ingevoegd na evt. uitvoer-opties (zie --uitopts) en voor video-
#		en geluid encoders en hun opties. Meerdere "--filteropts" parameters worden in opgegeven volgorde na elkaar ingevoegd.
#		Filteropties kunnen ook bij --uitopts geplaatst worden, of bij de string voor de geluid- of video-encoder,
#		maar door de soms ingewikkelde filter-opties een eigen optienaam te geven, is het gemakkelijker om eenvoudige
#		opties elders uit te testen en weer weg te laten.
#		- ffmpeg-vertaling, naargelang doorgang 1 of 2 : $optie_strings_voor_filters, ontdaan van evt. "1:" of "2:"
#		 en opgesplitst op de spaties.
#		- ffmpeg-vertaling zonder optie_strings_voor_filters, of met enkel "1:" of "2:": de letterlijke elementen
#		 van de arrays "", "" resp. "", 
#	
#		Voorbeelden van geluid-filters (meestal enkel zinvol in 2de doorgang:
#		-----------------------------
#		- herleid naar mono-geluid : --filteropts="2: -ac 1"
#		- gebruik bash array voor geluid filter in pass 2: herleid stereo naar mono, met meer nadruk op het
#		  oorspronkelijke linker-kanaal :
#		  filteropts2=("-af" "pan=1c|c0=0.6*c0+0.4*c1"); ffmpeg ... --filteropts=2: ...
#		- herleid naar 2 kanalen, maar geef ze dezelfde inhoud, nl. de som van beide, in stereo-layout :
#		  filteropts2=("-ac" "2" "-af" "pan=stereo|c0<c0+c1|c1<c0+c1"); ffmpeg ... --filteropts=2: ... 
#	
# 		Voorbeelden van video-filters :
#		-----------------------------
#		- doe alsof input vierkante pixels heeft (sample aspect ratio); 'display aspect ratio' van output
#		  wordt sar x width / height:
#		  --filteropts="-vf setsar=sar=1/1" :
#		- vergroot of verklein naar 1280 breed, met behoud van hoogte/breedte-verhouding :
#		  --filteropts="-vf scale=1280:-1"
#		- high quality noise filter met veel opties, defaults zijn al zeer goed :
#		  --filteropts="-vf hqdn3d"
#		- Adaptive Temporal Averaging Denoiser over 5 tot 129 frames (altijd oneven, default 9)
#		  --filteropts="-vf atadenoise=s=5" : over 5 frames, rest defaults
#		  - beter dan de generieke optie "-nr integer" (noise reduction) van libavcodec (geen ffmpeg video filter)
#		- Sharpen met fourier transfo, highpass filter, en inverse fourier transfo (squish(x) = 1/(1 + exp(4*x))
#		  --filteropts="-vf fftfilt=dc_Y=0:weight_Y='1+squish(1-(Y+X)/100)'"
#		- leg het gebruikelijke pixelformaat op, o.a. om HuffYuv in andere gangbare encoders te comprimeren
#		  --filteropts="-vf format=yuv420p" OF zijn alias --filteropts="-pix_fmt yuv420p"
#		- kleur verwijderen :
#		  --filteropts="-vf format=gray"
#		- deinterlacing (yet another deinterlacing filter), zie (https://ffmpeg.org/ffmpeg-filters.html#yadif) 
#		  --filteropts="-vf yadif" : met default instellingen
#		- deinterlacing met bwdif (Bob Weaver Deinterlacing Filter), een afgeleide van yadif :
#		  --filteropts="-vf bwdif=0:-1:0" : Output one frame for each frame, auto-parity, deinterlace all frames
#		- deinterlace video, en bitmap subs inbakken: (geen verdere mapping nodig: elke input van filter gaat niet 
#		  meer door naar output, en output van videofilter wordt hoofd-videostream
#		  --filteropts="-filter_complex yadif[tmp],[tmp][1:s]overlay"
#		- deinterlace 2de video-stream, bitmap subs inbakken, andere videostreams laten vallen, en pixel formaat
#		 veranderen:
#		  --filteropts="-filter_complex [v:1]yadif[tmp];[tmp][0:s]overlay[v_out] -map [v_out]
#		  -map a -pix_fmt yuv420p"
#		- witte bitmap-ondertitels vergulden (maar eerst format=yuva444p: subsampling verwijderen, met behoud van
#		  alpha, want filters zoals colorlevels en colorbalance heffen die gewoon op, met verdubbeling van breedte
#		  tot gevolg), en ondertiels inbakken in video:
#		  --filteropts="-filter_complex [s:0]format=yuva444p,colorbalance=rh=0.7:gh=0.1:bh=-.9[subs];
#		  [V][subs]overlay"
#		- BlueRay-ondertitels vergelen, dan vergroten (van 1440x1080 naar 1733x1300), terug centreren en verlagen
#		  --filteropts="-filter_complex [s:0]format=yuva444p,colorlevels=rimax=0.9:gimax=0.4:bimin=0.75,
#		  scale=-1:1300[subs];[V][subs]overlay=(main_w-overlay_w)/2:main_h-overlay_h+70"
#		- als bron 30.04-30.05 fps heeft, kan dat een lawine van waarschuwingen geven zoals
#		  "Past duration 0.992332 too large"; geef de invoer dan een vaste framerate met :
#		  --filteropts="-filter:v fps=30"
#		- midden spiegelen en samenvoegen
#		  --filteropts="-vf crop=iw/2:ih:iw/4:0,split[left][tmp];[tmp]hflip[right];[left][right]hstack"
#		  - OPM: gebruik deze video filter met ffplay, met hflip vervangen door iets nuttigs, om het effect van
#		   een filter te bestuderen.
"
#
# Video-encoders
# ==============   
# Elk van de video-encoder-parameters aanvaardt optioneel 1 of meerdere bijkomende ffmpeg-opties t.b.v. de
# encoder in de vorm --%encoder-naam%="[-ffmpegoptie [waarde]]...", volgens de beschrijving in de sectie
# "Meervoudige parameters". Dit geldt natuurlijk niet voor de oneigenlijke encoder --vcopy.
# 
#	--265
#	--x265
#	--h265
#	--libx265=["ffmpeg_opties"] : hercodeer video naar h.265-formaat met de libx265 High Efficiency Video Codec.
#		Dit is de default encoder van 2passffmpeg, maar met deze parameter kunnen extra opties opgegeven worden.
#		- ffmpeg-vertaling : "-c:v libx265 $ffmpeg_opties" (die laatste opgesplitst op de spaties)
#	--264
#	--x264
#	--h264
#	--libx264=["ffmpeg_opties"] : hercodeer video naar h.264-formaat met de libx264 Advanced Video Codec.
#		- ffmpeg-vertaling : "-c:v libx264 $ffmpeg_opties" (die laatste opgesplitst op de spaties)
#	--xvid
#	--libxvid=["ffmpeg_opties"] : hercodeer video naar h.263-formaat met de libxvid codec.
#		- OPM: mijn eigen ffmpeg is ZONDER libxvid gecompileerd
#		- ffmpeg-vertaling : "-c:v libxvid $ffmpeg_opties" (die laatste opgesplitst op de spaties)
#	--mpeg4=["ffmpeg_opties"] : hercodeer video naar h.263-formaat met ffmpeg''s eigen mpeg4 codec, met XviD als fourCC.
#		- OPM: mijn eigen ffmpeg is ZONDER libxvid gecompileerd
#		- ffmpeg-vertaling : "-c:v mpeg4 -vtag XVID $ffmpeg_opties" (die laatste opgesplitst op de spaties)
#	--vcopy : kopiëer het bestaande videospoor zonder hercoderen. Deze keuze zet automatisch ook de optie --singlepass.
#		- ffmpeg-vertaling : "-c:v copy"
#
# Video-opties
# ============   
#	--vbr=999k : geeft expliciet de maximaal gewenste gemiddelde video-bitrate voor de gekozen encoder.
#		Als ook een of meer van de andere video-bitrate parameters wordt opgegeven, wordt de uiteindelijke
#		gevraagde bitrate het minimum van allemaal.
#		- de bitrate is in decimale kilobyte
#		- het suffix 'k' is optioneel.
#		- ffmpeg-vertaling : "-b:v '$999'k" of de berekende waarde
#	--bronbr[=999%] : leidt de nuttige  max. gemiddelde video-bitrate af van die van de bron, rekening houdend 
#		met het verschil in bithonger van bron- en doel-encoder (b.v. h.265 60% van h.264 60% van h.263).
#		Optioneel wordt uiteindelijk het gekozen percentage genomen van wat uit de bron wordt afgeleid.
#		Als ook een of meer van de andere video-bitrate parameters wordt opgegeven, wordt de uiteindelijke
#		gevraagde bitrate het minimum van allemaal.
#		- het suffix '%' is optioneel.
#		- ffmpeg-vertaling : "-b:v 999k" met de berekende waarde
#	--rasterbr[=999%] : leidt een nuttige max. gemiddelde video-bitrate af van breedte x hoogte en framerate van de
#		bron, rekening houdend met de bithonger van de doel-encoder (b.v. h.265 60% van h.264 60% van h.263).
#		De basis hiervoor is een aanbevolen tabel voor h.264 bitrates, die wordt toegeschreven aan Youtube.
#		Optioneel wordt uiteindelijk het gekozen percentage genomen van wat uit de bron wordt afgeleid.
#		Als ook een of meer van de andere video-bitrate parameters wordt opgegeven, wordt de uiteindelijke
#		gevraagde bitrate het minimum van allemaal.
#		- het suffix '%' is optioneel.
#		- ffmpeg-vertaling : "-b:v 999k" met de berekende waarde
#	--tune="video_encoder_tuning" : algemene ffmpeg-parameter voor fijnregeling van de gekozen encoder.
#		Afhankelijk van de encoder zijn de volgende waarden mogelijk:
#		X.265: psnr, ssim, grain, zerolatency, fastdecode, animation
#		  - geen default
#		  - animation: improves encode quality for animated content
#		  - grain: for grainy (or really foggy) source where the grain should be kept and is not filtered
#		   out before encoding; neither retains nor eliminates grain, but prevents noticeable artifacts
#		   caused by uneven distribution of grain.
#		  - zerolatency: frame per frame, nuttig voor streaming
#		  - fastdecode: for play back on systems with low cpu power, or 4K content at high bitrates
#		  - geen film : X.265 is helemal voor film
#		  - geen grayscale : "not more efficient than empty chroma planes", gebruik
#		   desnoods --filteropts="-vf format=gray -pix_fmt yuv420p"
#		  - psnr: for debugging
#		  - ssim: for debugging
#		  - zie ook https://x265.readthedocs.io/en/default/presets.html#tuning
#		X.264 : film, animation, grain, stillimage, psnr, ssim, fastdecode, zerolatency
#		  - script default is film
#		  - film: normal film source encoded at a decent datarate (lowers the inloop-deblocking and tweaks
#		   the psychovisual settings slightly)
#		  - animation: cartoon-like source with large flat areas (boost deblocking, changes pychoviual
#		   settings doubles reference frames)
#		  - grain: for grainy (or really foggy) source where the grain should be kept and is not filtered
#		   out before encoding
#		  - fastdecode: this is ment for content that needs to be played back on systems with low cpu power
#		  - geen grayscale : "not more efficient than empty chroma planes", gebruik
#		   desnoods --filteropts="-vf format=gray -pix_fmt yuv420p"
#		  - psnr: for debugging
#		  - ssim: for debugging
#		XviD : TE DOEN
#		- ffmpeg-vertaling : "-tune:v '$video_encoder_tuning'"
#	--profile="video_encoder_profiel" : algemene ffmpeg-parameter om een bepaald compatibiliteitsprofiel op te
#		geven voor de gekozen video encoder.
#		Afhankelijk van de encoder zijn de volgende waarden mogelijk:
#		X.265 : main, mainstillpicture == msp, en een reeks profielen voor high dynamic range, minder
#		  chroma subsampling en intra-frame encoding.
#		  - geen default
#		X.264 : baseline, main, high
#		  - script default is high
#		  - OPM: evt. level apart op te geven bij video encoder opties, b.v. --libx265="-level 3.0"
#		XviD : TE DOEN
#		- ffmpeg-vertaling : "-profile:v '$video_encoder_profiel'"
#	--preset="video_encoder_preset" : algemene ffmpeg-parameter om een vooraf bepaalde balans tussen compressie 
#		en snelheid op te  geven voor de gekozen video encoder.
#		Afhankelijk van de encoder zijn de volgende waarden mogelijk:
#		X.264, X.265 : ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow, placebo
#		X.265 : Zie ook (https://x265.readthedocs.io/en/default/presets.html)
#		  - default is medium
#		  - medium voor 1920x1080 : 1 fps
#		  - medium voor 640x360 : 150 fps
#		  -  2 ffmpeg's in medium voor 640x360 : elk 110fps, en 160fps in pass 1 met no-slow-firstpass
#		  - slow voor 640x360 : 60 fps
#		  - slower voor 640x360 : 18 fps
#		X.264
#		  - script default is slower
#		  - medium voor 640x480 : 800 fps in pass 1, 350 in pass 2
#		  - slower voor 640x480 : 550 fps in pass 1, 200 in pass 2
#		XviD : TE DOEN
#		- ffmpeg-vertaling : "-profile:v '$video_encoder_preset'"
#	--x265params="naam=waarde[:naam=waarde]..." : opties voor de parameter "-x265-params" van de libx265 encoder
#		- opgegeven als ':'-gescheiden lijst "naam=waarde[:naam2=waarde2]"
#		- namen zonder echte waarde moeten toch de pseudo-waarde "=1" krijgen om geldig te zijn
# 		- zie https://x265.readthedocs.io/en/default/cli.html
#		- ffmpeg-vertaling : "-x265-params '$naam=waarde...'"
#		  - de waarden van meerdere opties --x265params worden aan elkaar geschakeld, gescheiden door een ':'.
#
# 		Voorbeeld
# 		---------
#		- snel een verliesloze omzetting doen:
# 		   --x265params="lossless=1" --singlepass --preset=ultrafast
#
# Geluid-encoders
# ===============   
# Elk van de audio-encoder-parameters aanvaardt optioneel 1 of meerdere bijkomende ffmpeg-opties t.b.v. de
# encoder in de vorm --%encoder-naam%="[-ffmpegoptie [waarde]]...", volgens de beschrijving in de sectie
# "Meervoudige parameters". Dit geldt natuurlijk niet voor de oneigenlijke encoders --an en --acopy.
#
#	--fdk_aac
#	--libfdk_aac=["ffmpeg_opties"] : hercodeer geluid naar aac-formaat met libfdk_aac. Dit is de default
#		geluidsencoder van 2passffmpeg, maar deze parameter aanvaardt bijkomende ffmpeg-opties.
#		- Variabele bitrate instellen met --avbr.
#		- libfdk_aac is NIET beschikbaar in Ubuntu's standaard-compilatie van ffmpeg
#		- ffmpeg-vertaling : "-c:a libfdk_aac $ffmpeg_opties" (die laatste opgesplitst op de spaties)
#
#		Voorbeeld van extra opties:
#		--------------------------
#		- manueel ingestelde 5.1 naar stereo
# 			--libfdk_aac="-af pan=stereo|FL<FC+0.707*FL+0.30*BL|FR<FC+0.707*FR+0.30*BR"
#	--aac=["ffmpeg_opties"] : hercodeer geluid naar aac-formaat. Als de gekozen ffmpeg-versie met 
#		libfdk_aac gecompileerd is, wordt die genomen, en anders ffmeg's eigen aac-implementatie.
#		- OPM: ffmpeg's eigen aac ondersteunt de profielen aac-he1 en aac-he2 NIET
#		- Zie verder beschrijving --libfdk_aac
#		- ffmpeg-vertaling : "-c:a libfdk_aac $ffmpeg_opties" OF "-c:a aac $ffmpeg_opties"
#		  (ffmpeg_opties opgesplitst op de spaties)
#	--mp3
#	--lame
#	--libmp3lame=["ffmpeg_opties"] : hercodeer geluid naar mp3-formaat met lame.
#		- Variabele bitrate instellen met --avbr.
#		- ffmpeg-vertaling : "-c:a libmp3lame $ffmpeg_opties" (die laatste opgesplitst op de spaties)
#	--acopy : kopiëer het bestaande geluid zonder hercoderen.
#		- ffmpeg-vertaling : "-c:a copy"
#	--an : laat geluid volledig weg.
#		- ffmpeg-vertaling : "-an"
#
# Geluid-opties
# =============   
#	--avbr=9 : het kwaliteitsniveau dat met een veranderlijke geluids-bitrate wordt nagestreefd.
#		Dit is afhankelijk van de gekozen encoder:
#		- fdk_aac met --he2 (high efficiency profile 2) typische kbps voor stereo:
#		  --avbr=0 : (default) constante bitrate, extra op te geven als b.v. --libfdk_aac="-b:a 24k"
#		  --avbr=1 : 16kbps, --avbr=2 : 18kbps, --avbr=3 : 20kbps
#		- aac en fdk_aac (default profile) typische kbps voor mono, stereo en 5.1 (=2x mono + 2x stereo) :
#		  --avbr=0 : (default) constante bitrate, extra op te geven als b.v. --aac="-b:a 128k"
#		  --avbr=1 : mono  32kbps, stereo  40kbps, 5.1 144kbps
#		  --avbr=2 : mono  40kbps, stereo  64kbps, 5.1 208kbps
#		  --avbr=3 : mono  56kbps, stereo  96kbps, 5.1 304kbps
#		  --avbr=4 : mono  72kbps, stereo 128kbps, 5.1 400kbps
#		  --avbr=5 : mono 112kbps, stereo 192kbps, 5.1 608kbps
#		  - zie ook http://wiki.hydrogenaud.io/index.php?title=Fraunhofer_FDK_AAC#Bitrate_Modes
#		- Lame mp3 (--avbr: gemiddeld/van-tot in kbps)
#		  --avbr=0: 245/220-260| ~=1: 225/190-250| ~=2: 190/170-210| ~=3: 175/150-195| ~=4: 165/140-185,
#		  --avbr=5: 130/120-150| ~=6: 115/100-130| ~=7: 100/ 80-120| ~=8:  85/ 70-105| ~=9:  65/ 45- 85
#		  - zie ook "ffmpeg truuks en commandos" sectie "mp3 Lame VBR opties": :
#		- ffmpeg-vertaling : "-vbr:a $9"
#	--ar=99999 : herbemonster het geluid naar het opgegeven aantal kHz per seconde (sample rate)
#		- mogelijke waarden zijn 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000
#	--ar=1k OF =2k : herbemonster het geluid naar de helft of een derde van de bronsnelheid als die 'hoog'
#		is; meer bepaald wordt 48000 herleidt tot 16000 of 24000, 44100 tot 22050, 32000 tot 16000, 
#		24000 tot 16000 of (onveranderd) 24000 (alles in kHz).
#		- ffmpeg-vertaling : "-ar $99999" of de berekende waarde
#	--he2 : gebruik het high efficiency profile van de libfdk_aac geluidsencoder.
#		- Het geluid moet stereo zijn, maar zou door verschilcodering slechts 2-3 kbps meer geven dan mono.
#		  - hercodeer mono als stereo met --libfdk_aac="-ac 2" --he2
#		  - zie ook --spraak
#		  - compatibiliteit: volgens wiki.hydrogenaud.io kan he2 tegenwoordig afgespeeld worden door
#		    alles wat aac kan afspelen, volgens anderen niet:
#		    - WEL Medion TV : speelt aac_he_v2 in mp4 en m4a (geen mp3 in mp4!)
#		    - WEL Onda V972 tablet : speelt aac_he_v2 in mp4 en m4a
#		    - NIET LG dvd-speler : vindt m4a gewoon niet, en speelt geen aac_he_v2 in mp4
#		- ffmpeg-vertaling : "-profile:a aac_he_v2"
#	--spraak : verdeel stereo geluid gelijk over 2 stereo kanalen, zodat het even compact gecodeerd wordt als mono.
#		Deze parameter is vooral nuttig voor spraak met --libfdk_aac --he2
#		- ffmpeg-vertaling : "-ac 1", maar samen met optie --he2 "-ac 2 -af pan=stereo|c0<c0+c1|c1<c0+c1"
#	--surround : behoud surround geluid met meer dan 2 kanalen. Zonder deze parameter herleid ik alles behalve mono
#		naar 2 kanalen, omdat ik toch maar 2 luidssprekers heb.
#		- ffmpeg-vertaling : bij ontstentenis "-ac 2" als er meer dan 2 kanalen zijn in het geluidsspoor
